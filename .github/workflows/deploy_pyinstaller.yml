name: Deploy PyInstaller Executables

on:
  workflow_dispatch:
  pull_request:
  release:
    types: [published]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        torch_variant: [cpu, cu128]
        include:
          - os: ubuntu-latest
            platform: linux-x64
            shell: bash
            build_script: ./INSTALL/pyinstaller/make_pyinstaller_image.sh
            executable_ext: ""
          - os: macos-latest
            platform: macos-x64
            shell: bash
            build_script: ./INSTALL/pyinstaller/make_pyinstaller_image.sh
            executable_ext: ""
          - os: windows-latest
            platform: windows-x64
            shell: pwsh
            build_script: ./INSTALL/pyinstaller/make_pyinstaller_image.ps1
            executable_ext: ".exe"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install tomli for version extraction
        run: python -m pip install tomli
        shell: ${{ matrix.shell }}

      - name: Extract version from pyproject.toml
        id: get_version
        run: |
          python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])"
        shell: ${{ matrix.shell }}

      - name: Create virtual environment
        run: |
          python -m venv .venv
        shell: ${{ matrix.shell }}

      - name: Install dependencies and build
        run: |
          ${{ matrix.build_script }} ${{ matrix.torch_variant }}
        shell: ${{ matrix.shell }}

      - name: Verify build
        run: |
          ls -la dist/
          EXECUTABLE="dist/photomap-${{ matrix.torch_variant }}${{ matrix.executable_ext }}"
          if [ -f "$EXECUTABLE" ]; then
            echo "Build successful: $EXECUTABLE"
            file "$EXECUTABLE"
          else
            echo "Build failed: executable not found"
            exit 1
          fi
        shell: ${{ matrix.shell }}

      - name: Create zip archive with version
        run: |
          cd dist
          EXECUTABLE="photomap-${{ matrix.torch_variant }}${{ matrix.executable_ext }}"
          ARCHIVE_NAME="photomap-${{ matrix.platform }}-${{ matrix.torch_variant }}-v${{ steps.get_version.outputs.version }}.zip"
          zip -j "$ARCHIVE_NAME" "$EXECUTABLE"
          ls -la *.zip
        shell: ${{ matrix.shell }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: photomap-${{ matrix.platform }}-${{ matrix.torch_variant }}-v${{ steps.get_version.outputs.version }}
          path: dist/photomap-${{ matrix.platform }}-${{ matrix.torch_variant }}-v${{ steps.get_version.outputs.version }}.zip
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Upload to release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}