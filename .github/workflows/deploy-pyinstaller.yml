name: Deploy PyInstaller Executables

on:
  workflow_call:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        torch_variant: [cpu, cu128]
        include:
          - os: ubuntu-latest
            platform: linux-x64
            build_script: ./INSTALL/pyinstaller/make_pyinstaller_image.sh
            executable_ext: ""
          - os: macos-latest
            platform: macos-x64
            build_script: ./INSTALL/pyinstaller/make_pyinstaller_image.sh
            executable_ext: ""
          - os: windows-latest
            platform: windows-x64
            build_script: ./INSTALL/pyinstaller/make_pyinstaller_image.ps1
            executable_ext: ".exe"
        exclude:
          - os: macos-latest
            torch_variant: cu128
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install tomli for version extraction (Linux/macOS)
        if: runner.os != 'Windows'
        run: python -m pip install tomli
        shell: bash

      - name: Install tomli for version extraction (Windows)
        if: runner.os == 'Windows'
        run: python -m pip install tomli
        shell: pwsh

      - name: Extract version from pyproject.toml (Linux/macOS)
        if: runner.os != 'Windows'
        id: get_version_unix
        run: |
          VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Extract version from pyproject.toml (Windows)
        if: runner.os == 'Windows'
        id: get_version_win
        run: |
          $VERSION = python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])"
          echo "version=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        shell: pwsh

      - name: Create virtual environment (Linux/macOS)
        if: runner.os != 'Windows'
        run: python -m venv .venv
        shell: bash

      - name: Create virtual environment (Windows)
        if: runner.os == 'Windows'
        run: python -m venv .venv
        shell: pwsh

      - name: Install dependencies and build (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          source .venv/bin/activate
          ${{ matrix.build_script }} ${{ matrix.torch_variant }}
        shell: bash

      - name: Install dependencies and build (Windows)
        if: runner.os == 'Windows'
        run: |
          .\.venv\Scripts\Activate.ps1
          & ${{ matrix.build_script }} ${{ matrix.torch_variant }}
        shell: pwsh

      - name: Rename executable
        run: |
          mv dist/photomap${{ matrix.executable_ext }} dist/photomap-${{ matrix.torch_variant }}${{ matrix.executable_ext }}
        shell: bash
        if: runner.os != 'Windows'

      - name: Rename executable (Windows)
        run: |
          Rename-Item -Path dist\photomap${{ matrix.executable_ext }} -NewName photomap-${{ matrix.torch_variant }}${{ matrix.executable_ext }}
        shell: pwsh
        if: runner.os == 'Windows'

      - name: Create zip archive with version (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cd dist
          ARCHIVE_NAME="photomap-${{ matrix.platform }}-${{ matrix.torch_variant }}-v${{ steps.get_version_unix.outputs.version || steps.get_version_win.outputs.version }}.zip"
          zip -j "$ARCHIVE_NAME" "photomap-${{ matrix.torch_variant }}${{ matrix.executable_ext }}"
          ls -la *.zip
        shell: bash

      - name: Create zip archive with version (Windows)
        if: runner.os == 'Windows'
        run: |
          cd dist
          $archiveName = "photomap-${{ matrix.platform }}-${{ matrix.torch_variant }}-v${{ steps.get_version_unix.outputs.version || steps.get_version_win.outputs.version }}.zip"
          Compress-Archive -Path "photomap-${{ matrix.torch_variant }}${{ matrix.executable_ext }}" -DestinationPath $archiveName
          Get-ChildItem *.zip
        shell: pwsh

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: photomap-${{ matrix.platform }}-${{ matrix.torch_variant }}-v${{ steps.get_version_unix.outputs.version || steps.get_version_win.outputs.version }}
          path: dist/photomap-${{ matrix.platform }}-${{ matrix.torch_variant }}-v${{ steps.get_version_unix.outputs.version || steps.get_version_win.outputs.version }}.zip
          retention-days: 30
