name: Deploy PyInstaller Executables (macOS + Linux)

on:
  workflow_dispatch:
  pull request:
  release:
    types: [published]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: photomap-linux-x64
            executable_path: dist/photomap/photomap
          - os: macos-latest
            artifact_name: photomap-macos-x64
            executable_path: dist/photomap/photomap

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install tomli for version extraction
        run: python -m pip install tomli

      - name: Extract version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Create virtual environment
        run: |
          python -m venv .venv
          
      - name: Activate virtual environment (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "source .venv/bin/activate" >> $GITHUB_ENV
          source .venv/bin/activate
          echo "PATH=$VIRTUAL_ENV/bin:$PATH" >> $GITHUB_ENV

      - name: Activate virtual environment (macOS)
        if: runner.os == 'macOS'
        run: |
          echo "source .venv/bin/activate" >> $GITHUB_ENV
          source .venv/bin/activate
          echo "PATH=$VIRTUAL_ENV/bin:$PATH" >> $GITHUB_ENV

      - name: Install dependencies and build
        run: |
          source .venv/bin/activate
          chmod +x INSTALL/pyinstaller/make_pyinstaller_image.sh
          ./INSTALL/pyinstaller/make_pyinstaller_image.sh

      - name: Verify build
        run: |
          ls -la dist/
          if [ -f "${{ matrix.executable_path }}" ]; then
            echo "Build successful: ${{ matrix.executable_path }}"
            file "${{ matrix.executable_path }}"
          else
            echo "Build failed: executable not found"
            exit 1
          fi

      - name: Create zip archive with version
        run: |
          cd dist
          ARCHIVE_NAME="${{ matrix.artifact_name }}-v${{ steps.get_version.outputs.version }}.zip"
          zip -r "$ARCHIVE_NAME" photomap/
          ls -la *.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-v${{ steps.get_version.outputs.version }}
          path: dist/${{ matrix.artifact_name }}-v${{ steps.get_version.outputs.version }}.zip
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Upload to release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}