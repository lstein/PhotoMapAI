{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PhotoMapAI","text":"<p>Rediscover your photo collection!</p> <p>PhotoMapAI is a fast, modern image browser and search tool for large photo collections. It uses the CLIP computer vision model to enable text and image-based search, image clustering, and interactive slideshows with a responsive web interface. Its unique feature is a \"semantic map\" that clusters and visualizes your images by their content. Browse the semantic map to find and explore thematically-related groups of photos, or use text and/or image similarity search to find specific people, places, events, styles and themes.</p> Try it out here: <p></p>"},{"location":"#features","title":"Features","text":"<ul> <li>Fast browsing of large image collections</li> <li>All images are local to your computer; nothing goes out to the internet</li> <li>AI-based text and image similarity search</li> <li>Thematic image clustering and visualization</li> <li>Flexible album management</li> <li>Responsive UI for desktop and mobile</li> <li>Support for wide range of image formats, including Apple's HEIC</li> <li>Extensible backend (FastAPI)</li> </ul>"},{"location":"#the-semantic-map","title":"The Semantic Map","text":"<p>PhotoMapAI's unique feature is its ability to identify thematically similar images and automatically cluster them, creating a \"semantic map\":</p> <p></p> <p>In this map, each image in the photo collection is represented as a dot. The colors distinguish different clusters of related images. You can zoom in and out of the map and pan around it. Hover the mouse over a dot in order to see a preview thumbnail of its image, or click on a cluster to view its contents at full resolution.</p> <p>You can move the semantic map around, shrink it down in size, or hide it altogether. As you browse your photo collection, a yellow dot marker will highlight the location of the current image in the map.</p>"},{"location":"#text-and-image-similarity-search","title":"Text and Image Similarity Search","text":"<p>PhotoMapAI lets you search your collection by similarity to another image, by text, or by a combination of image and text as shown below:</p> <p></p> <p>You can start an image similarity search by uploading a local image file, dragging an image from a web browser window or file browser, or by selecting an existing image from your collection. There's also a \"Text to Avoid\" field, which can be used to disfavor certain image content.</p>"},{"location":"#photo-metadata-display","title":"Photo Metadata Display","text":"<p>When viewing a photo in full-screen mode, you can pop out a little drawer to show its metadata, including the GPS location (if available), and the camera/phone settings:</p> <p></p>"},{"location":"#invokeai-metadata-support","title":"InvokeAI Metadata Support","text":"<p>If you are a user of the InvokeAI text-to-image generation tool, you can get quick access to the key settings used to generate the image, including the prompts, model and LoRAs in use, and the input images used for IPAdapters, ControlNets and the img2img raster layer. You can also display the full generation metadata in native JSON format and copy it to the clipboard.</p> <p></p>"},{"location":"#other-features","title":"Other Features","text":"<p>PhotoMapAI supports most of the other features you would expect, including support for multiple separate photo albums, the ability to browse photos chronologically, an uncluttered fullscreen mode, and of course a configurable slideshow mode that can show images sequentially or shuffled.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Here are instructions for installation on Windows, Linux/Mac, From the Python repo, and Docker</p>"},{"location":"#windows","title":"Windows","text":""},{"location":"#1-download-and-unpack-the-source-code","title":"1. Download and unpack the source code","text":"<p>Download the PhotoMapAI source code as a .zip file from the latest stable Releases page. For development versions, use the \"Download ZIP\" link in the green \"Code\" button near the top of the GitHub PhotoMapAI home page.</p> <p>Choose a convenient location in your home folder and unzip the file to create a new folder named <code>PhotoMapAI</code>.</p>"},{"location":"#2-run-the-installer-script","title":"2. Run the installer script","text":"<p>Navigate to the unpacked <code>PhotoMapAI</code> folder, find the <code>INSTALL</code> folder, and double-click the <code>install_windows</code> script file. The system will check that Python and other requirements are installed, download the necessary library files, and create a .bat script named <code>start_photomap</code>.</p>"},{"location":"#3-start-the-server","title":"3. Start the server","text":"<p>Double-click <code>start_photomap.bat</code> to launch the server. You should see a few startup messages, followed by the URL for the running server.</p>"},{"location":"#4-open-your-browser","title":"4. Open your browser:","text":"<p>Navigate to <code>http://localhost:8050</code> and follow the prompts to create and populate your first album.</p>"},{"location":"#linux-mac","title":"Linux &amp; Mac","text":""},{"location":"#1-download-and-unpack-the-source-code_1","title":"1. Download and unpack the source code","text":"<p>Download the PhotoMapAI source code as a .zip file from the latest stable Releases page. For development versions, use the \"Download ZIP\" link in the green \"Code\" button near the top of the GitHub PhotoMapAI home page.</p> <p>Choose a convenient location in your home directory and unzip the file to create a new folder named <code>PhotoMapAI</code>.</p>"},{"location":"#2-run-the-installer-script_1","title":"2. Run the installer script","text":"<p>Navigate to the <code>PhotoMapAI</code> folder and launch the <code>install_linux_mac</code> shell script file. The script will check that Python and other requirements are installed, download the necessary library files, and create a launcher script named <code>start_photomap</code> on your desktop.</p>"},{"location":"#3-start-the-server_1","title":"3. Start the server","text":"<p>Double click <code>start_photomap</code> to launch the server. You will see a few startup messages followed by the URL for the running server.</p>"},{"location":"#4-open-your-browser_1","title":"4. Open your browser:","text":"<p>Navigate to <code>http://localhost:8050</code> and follow the prompts to create and populate your first album.</p>"},{"location":"#python-repository","title":"Python Repository","text":"<p>If you are familiar with installing Python packages from the PyPi repo, here is a quick four line recipe:</p> <pre><code>pip -mvenv photomap --prompt photomap\nsource photomap/bin/activate\npip install photomapai\nstart_photomap\n</code></pre> <p>After the startup messages, point your browser to http://localhost:8050 and follow the prompts.</p>"},{"location":"#docker-install","title":"Docker Install","text":"<p>If you have Docker installed on your system, here is a one-liner to get PhotoMapAI up and running:</p> <pre><code>docker -p 8050:8050 -v /path/to/a/picture_folder:/Pictures lstein/photomapai:latest\n</code></pre> <p>Change <code>/path/to/a/picture_folder</code> to a path on your desktop that contains the images/photos you wish to add to an album. After the startup messages, point your browser to http://localhost:8050 and follow the prompts. Your images will be found in the container directory <code>/Pictures</code>.</p>"},{"location":"#detailed-guides","title":"Detailed Guides","text":"<ul> <li>Installation</li> <li>User Guide</li> <li>Configuration</li> <li>Developer Guide</li> <li>Troubleshooting</li> </ul>"},{"location":"docker/","title":"Running from a Docker Image","text":"<p>You can run PhotoMapAI from a image registered with DockerHub. Alternatively, you can build and customize Docker image from PhotoMapAI's source code.</p>"},{"location":"docker/#running-from-dockerhub","title":"Running from DockerHub","text":"<p>There are two versions of PhotoMapAI available on DockerHub. The first, <code>photomapai-demo</code> is a demo version that comes prepackaged with a series of copyright-free images from Open Images. In this version, the ability to add, remove and edit albums has been disabled, as well as the ability to set the LocationIQ API key that is used to generate map thumbnails to display photograph GPS metadata. (Because LocationIQ grants licenses for personal use, this key cannot be incorporated into a public demo.)</p> <p>The second image is <code>photomapai</code>. This is the full-featured version of the application, that comes without any pre-configured albums. </p> <p>Assuming you have [Docker](https://docker.com installed on your system, run the following command to launch the demo version:</p> <pre><code>docker -p 8050:8050 lstein/photomapai-demo:latest\n</code></pre> <p>This will download the latest version of PhotoMapAI from DockerHub and run it, while mapping your desktop's network port 8050 to port 8050 running inside the container. You will see some startup messages. When they finish, point your browser to http://localhost:8050. You will see the PhotoMapAI user interface.</p> <p>Running the full version is almost as easy:</p> <pre><code>docker -p 8050:8050 -v /path/to/my/pictures:/Pictures lstein/photomapai:latest\n</code></pre> <p>The additional <code>-v</code> option maps a folder on your desktop machine to the <code>/Pictures</code> folder in the container. Replace <code>/path/to/my/pictures</code> with the appropriate folder path on your system. You may provide multiple <code>-v</code> options to map more directories. Once PhotoMapAI is running, point your browser to http://localhost:8050 and proceed to define an album as described in Managing Albums.</p> <p>You may find earlier versions of PhotoMapAI on DockerHub. Just do <code>docker search photomapai</code> to see all the available versions.</p>"},{"location":"docker/#building-a-customized-docker-image","title":"Building a Customized Docker Image","text":"<p>To build a customized image, you will need the PhotoMapAI source code. Download the zip or tar source code file from GitHub and unpack it. You will find two Docker build files in the <code>docker</code> folder, <code>Dockerfile</code> and <code>Dockerfile.demo</code>. The first builds the full application, and the second builds the demo version.</p> <p>To build the full application, run this command from inside the root of the source code repository (the one with README.md):</p> <pre><code>docker build -f docker/Dockerfile -t photomapai\n</code></pre> <p>This will build the image and register it locally. You can then run it with <code>docker -p 8050:8050 photomapai</code>.</p> <p>Building the demo version is almost the same, except that you have the option of preloading a collection of images for the demo. To do this, locate the (empty) <code>demo_images</code> folder in the source code repository, and copy a series of images into it. Then build the demo image with this command:</p> <pre><code>docker build -f docker/Dockerfile.demo -t photomapai-demo\n</code></pre> <p>The image will be built as before, but now you should see messages about loading and indexing the demo images.</p>"},{"location":"installation/","title":"Installation","text":"<p>PhotoMapAI is a Python-based web application that uses the CLIP image recognition AI model to identify similarities among images, as well as to enable text- and image-similarity searching. It runs completely on your local system, and does not make calls out to internet-based AI systems.</p>"},{"location":"installation/#hardware-requirements","title":"Hardware Requirements","text":"<ul> <li>Operating System: Any recent (post-2020) version of Windows, Linux or MacOS.</li> <li>RAM: 8+ GB RAM recommended</li> <li>Disk: 6 GB free for the application and its dependencies, exclusive of the space needed for your photo/image collection.</li> <li>CPU: Any recent (post-2020) Intel or Apple CPU.</li> <li>GPU: NVidia graphics card (optional)</li> </ul> <p>If an NVidia graphics card is available, then PhotoMapAI will take advantage of it during the initial indexing of your photo collection for a 10x increase in indexing speed. You may need to install additional libraries to take advantage of this feature as described below.</p> <p>PhotoMapAI will take advantage of the built-in GPU acceleration on Apple M1, M2 and M3 chips.</p>"},{"location":"installation/#installing-prerequisites","title":"Installing Prerequisites","text":"<p>Before installing PhotoMapAI, you'll need to install Python and optionally CUDA.</p> <ul> <li>Python</li> <li>CUDA (Only if you need NVidia GPU card support)</li> </ul> <p>After the preqrequisites are installed, follow the installation directions for Linux &amp; MacOS or Windows. For those who are comfortable with the command shell, there are also instructions for Manual Installs</p>"},{"location":"installation/#windows","title":"Windows","text":""},{"location":"installation/#1-download-and-unpack-the-source-code","title":"1. Download and unpack the source code","text":"<p>Download the PhotoMapAI source code as a .zip file from the latest stable Releases page. For development versions, use the \"Download ZIP\" link in the green \"Code\" button near the top of the GitHub PhotoMapAI home page.</p> <p>Choose a convenient location in your home folder and unzip the file to create a new folder named <code>PhotoMapAI</code>.</p>"},{"location":"installation/#2-run-the-installer-script","title":"2. Run the installer script","text":"<p>Navigate to the unpacked <code>PhotoMapAI</code> folder, find the <code>INSTALL</code> folder, and double-click the <code>install_windows</code> script file. The system will check that Python and other requirements are installed, download the necessary library files, and create a .bat script named <code>start_photomap</code>.</p>"},{"location":"installation/#3-optional-install-microsoft-c-runtime-dlls","title":"3. [Optional] Install Microsoft C++ Runtime DLLs","text":"<p>Several of PhotoMapAI's dependencies require Microsoft C++ Runtime DLLs. If these are not present, the installer will attempt to download and install them on your behalf. You will need to relaunch the install script after this is done.</p>"},{"location":"installation/#4-start-the-server","title":"4. Start the server","text":"<p>Double-click <code>start_photomap.bat</code> to launch the server. You should see a few startup messages, followed by the URL for the running server. Cut and paste this into your browser, and follow the prompts to configure and index your first album. See Albums for a walkthrough.</p>"},{"location":"installation/#5-exiting-and-relaunching","title":"5. Exiting and relaunching","text":"<p>To exit the server, press ^C (control-C). </p> <p>To relaunch the server, run the <code>start_photomap</code> .bat script again. For your convenience, you may move this script anywhere you like. Don't move the PhotoMapAI folder, or the script will not be able to find it again. If this happens, simply re-run the installer script to generate an updated launcher.</p>"},{"location":"installation/#linux-macos","title":"Linux &amp; MacOS","text":""},{"location":"installation/#1-download-and-unpack-the-source-code_1","title":"1. Download and unpack the source code","text":"<p>Download the PhotoMapAI source code as a .zip file from the latest stable Releases page. For development versions, use the \"Download ZIP\" link in the green \"Code\" button near the top of the GitHub PhotoMapAI home page.</p> <p>Choose a convenient location in your Downloads directory and unzip the file to create a new folder named <code>PhotoMapAI-X.X.X</code>, where X.X.X is the current release number</p>"},{"location":"installation/#2-run-the-installer-script_1","title":"2. Run the installer script","text":"<p>Launch a command-line shell (\"Terminal\" on the Mac) and navigate to the <code>PhotoMap-X.X.X</code> folder. Launch the <code>INSTALL/install_linux_mac.sh</code> shell script file. The script will check that Python and other requirements are installed, download the necessary library files, and create a launcher script named <code>start_photomap</code> on your desktop. If you are uncomfortable with the command line, here are the commands you need:</p> <pre><code>cd ~/Downloads/PhotoMap-X.X.X/INSTALL\n/bin/sh install_linux_mac.sh\n</code></pre>"},{"location":"installation/#3-start-the-server","title":"3. Start the server","text":"<p>Double click <code>start_photomap</code> to launch the server. You will see a few startup messages followed by the URL for the running server. Cut and paste this into your browser and follow the prompts to configure and index your first album. See Albums for a walkthrough.</p>"},{"location":"installation/#4-exiting-and-relaunching","title":"4. Exiting and relaunching","text":"<p>To exit the server, press ^C (control-C). </p> <p>To relaunch the server, run the <code>start_photomap</code> launcher again. For your convenience, you may move this script anywhere you like. If you move the PhotoMapAI folder itself, you will need to re-run the installer script.</p>"},{"location":"installation/#pypi-installation","title":"PyPi  Installation","text":"<p>If you are familiar with installing Python packages, here is a quick recipe:</p> <pre><code>python -mvenv photomap --prompt photomap\nsource photomap/bin/activate\npip install --upgrade pip\npip install photomapai\nstart_photomap\n</code></pre> <p>After the startup messages, point your browser to http://localhost:8050 and follow the prompts.</p>"},{"location":"installation/#manual-installation","title":"Manual Installation","text":"<p>Download and unpack the source code as described in the sections above. Then follow these steps:</p>"},{"location":"installation/#1-create-an-installation-directory-for-the-executables","title":"1. Create an installation directory for the executables","text":"<p>In a command line window, enter the PhotoMapAI folder and run the <code>pip</code> (Python package installer) command to create a home for the PhotoMapAI executable and library files:</p> <pre><code>cd ~/PhotoMapAI\npip -mvenv install --prompt photomap\n</code></pre>"},{"location":"installation/#2-activate-the-folder-for-installation","title":"2. Activate the folder for installation:","text":"<pre><code>source install/bin/activate\n</code></pre> <p>Your system prompt should change to read <code>(photomap)</code> at this point.</p>"},{"location":"installation/#3-install-a-cuda-enabled-version-of-pytorch-optional-windows-only","title":"3. Install a CUDA enabled version of PyTorch (Optional: Windows only)","text":"<p>If you have an NVidia graphics card, are installing on a Windows machine, and have the CUDA Library installed, you can take advantage of GPU acceleration by installing a CUDA-enabled version of the PyTorch machine learning library used by PhotoMapAI during photo indexing. This step is not required for Linux or Macintosh systems, which will take advantage of GPU hardware acceleration automatically.</p> <p>Go to https://pytorch.org/get-started/locally/ and use the version selector to choose the version of PyTorch that matches your CUDA library version. Then issue the recommended installation command, e.g.</p> <pre><code>pip install torch torchvision --index-url https://download.pytorch.org/whl/cu129\n</code></pre> <p>If you initially installed the CPU-only version of PyTorch, don't despair. You can come back and install CUDA PyTorch at any time.</p>"},{"location":"installation/#4-install-photomapai-and-its-libraries","title":"4. Install PhotoMapAI and its libraries:","text":"<pre><code>pip install .\n</code></pre> <p>This will download and install all the libraries that PhotoMapAI requires. Depending on your internet speed, this may take a while.</p>"},{"location":"installation/#4-launch-the-photomapai-application","title":"4. Launch the PhotoMapAI application.","text":"<p>If installation completed without errors, launch the PhotoMapAI server with the <code>start_photomap</code> command:</p> <pre><code>start_photomap\n</code></pre> <p>You should see a few startup messages, followed by the URL for the running server. Cut and paste this into your browser, and follow the prompts to configure and index your first album. See Albums for a walkthrough.</p>"},{"location":"installation/#5-exiting-and-relaunching_1","title":"5. Exiting and relaunching","text":"<p>To exit the server, press ^C (control-C). </p> <p>To launch the server again, run its executable.</p> <p>On Windows:</p> <pre><code>C:\\path\\to\\PhotoMapAI\\install\\scripts\\start_photomap.exe\n</code></pre> <p>On Linux/MacOS:</p> <pre><code>bash\n/path/to/PhotoMapAI/install/bin/start_photomap\n</code></pre> <p>You can also just use the file browser to navigate to the <code>start_photomap</code> executable and double-click it.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Here are some frequently-encountered issues and their resolutions.</p>"},{"location":"troubleshooting/#no-images-are-showing-up-in-my-display","title":"No images are showing up in my display","text":"<p>Make sure that you have configured and indexed a photo album, that the directory(s) associated with the album contain valid images (JPEG, PNG, HEIC), and that the images are readable by your user account. Scroll to the album in question using the Album Manager and make sure that it has been indexed and that at least two images exist in the album. If necessary, reindex using the Index button.</p> <p>If these attempts fail, send a bug report to the PhotoMap Issues page, copying any error messages you see in the browser's JavaScript console and the PhotoMapAI launch script window.</p>"},{"location":"troubleshooting/#copy-and-paste-isnt-working","title":"Copy-and-Paste isn't working","text":"<p>When you try to copy some text from the image metadata drawer, you get a message that says \"Clipboard API not available due to browser security restrictions. Please copy manually.\"</p> <p>When a site is running under http (not https), browsers prevent the site's scripts from copying information into the system clipboard. You can fix this by running PhotoMapAI as an https service, either using self-signed certificates or behind an https-enabled reverse proxy as described in Running PhotoMapAI under HTTPS</p>"},{"location":"troubleshooting/#the-semantic-map-is-showing-no-clusters-or-too-many-clusters","title":"The semantic map is showing no clusters or too many clusters","text":"<p>This may be caused by two different issues:</p>"},{"location":"troubleshooting/#1-the-map-is-zoomed-out-too-far","title":"1. The map is zoomed out too far","text":"<p>When first opened, the semantic map scales to show the positions of 98% of the images. If your photos/images are too diverse, this may end up squeezing the majority of images into a small central group. Try zooming into the group to see the fine-structured detail.</p>"},{"location":"troubleshooting/#2-the-clustering-eps-needs-to-be-tweaked","title":"2. The clustering EPS needs to be tweaked","text":"<p>If even after zooming in you see either a handful of large clusters, or many small clusters and lots of unclustered (grey) dots, you may need to adjust the EPS (epsilon) parameter. Open the map window and find the EPS field. If you have too many clusters then increase the EPS value. This makes clustering more aggressive creating a smaller number of larger clusters. Alternatively, if you have too few clusters (or too many unclustered images), try lowering EPS.</p> <p>It takes a moment for changes to EPS to take effect. The best strategy is to adjust it by small increments. For more information, see Semantic Map.</p>"},{"location":"troubleshooting/#indexing-gets-stuck-at-00","title":"Indexing gets stuck at 0/0","text":"<p>If you are trying to index an album and the indexing seems to get stuck on the first image, you may have a corrupt index. This most frequently happens when you previously indexed the folder and then moved it to another location.</p> <p>To fix, look in each of the folders in the album for a <code>photomap_index</code> directory. Usually this will be located in the first folder of a multi-folder album. Remove this directory completely or rename it to get it out of the way. Then start the indexing process again. This will recreate the index.</p>"},{"location":"developer/api/","title":"PhotoMapAI API Reference","text":"<p>PhotoMapAI is driven by a Pydantic data model and a series of FastAPI endpoints. You may access and test these endpoints using http://localhost:8050/docs</p>"},{"location":"developer/api/#album-management-endpoints","title":"Album Management Endpoints","text":""},{"location":"developer/api/#get-available_albums","title":"<code>GET /available_albums/</code>","text":"<p>Description: Returns a list of all available albums.</p> <p>Response: - <code>200 OK</code>: List of album metadata (<code>key</code>, <code>name</code>, <code>description</code>, <code>index</code>, <code>umap_eps</code>, <code>image_paths</code>).</p>"},{"location":"developer/api/#get-albumalbum_key","title":"<code>GET /album/{album_key}/</code>","text":"<p>Description: Get details for a specific album.</p> <p>Parameters: - <code>album_key</code> (string): Album identifier.</p> <p>Response: - <code>200 OK</code>: Album object. - <code>404 Not Found</code>: If album does not exist.</p>"},{"location":"developer/api/#post-add_album","title":"<code>POST /add_album/</code>","text":"<p>Description: Add a new album.</p> <p>Body: - Album object (Pydantic model).</p> <p>Response: - <code>201 Created</code>: Success message. - <code>409 Conflict</code>: If album already exists.</p>"},{"location":"developer/api/#post-update_album","title":"<code>POST /update_album/</code>","text":"<p>Description: Update an existing album.</p> <p>Body: - Album data as a dictionary.</p> <p>Response: - <code>200 OK</code>: Success message. - <code>404 Not Found</code>: If album does not exist.</p>"},{"location":"developer/api/#delete-delete_albumalbum_key","title":"<code>DELETE /delete_album/{album_key}</code>","text":"<p>Description: Delete an album.</p> <p>Parameters: - <code>album_key</code> (string): Album identifier.</p> <p>Response: - <code>200 OK</code>: Success message. - <code>404 Not Found</code>: If album does not exist.</p>"},{"location":"developer/api/#get-locationiq_key","title":"<code>GET /locationiq_key/</code>","text":"<p>Description: Get the masked LocationIQ API key.</p> <p>Response: - <code>200 OK</code>: Masked API key or indication that no key is set.</p>"},{"location":"developer/api/#post-locationiq_key","title":"<code>POST /locationiq_key/</code>","text":"<p>Description: Set the LocationIQ API key.</p> <p>Body: - <code>{ \"api_key\": \"...\" }</code></p> <p>Response: - <code>200 OK</code>: Success or error message.</p>"},{"location":"developer/api/#post-set_umap_eps","title":"<code>POST /set_umap_eps/</code>","text":"<p>Description: Set the UMAP clustering epsilon for an album.</p> <p>Body: - <code>{ \"album\": \"album_key\", \"eps\": float }</code></p> <p>Response: - <code>200 OK</code>: Success message and new epsilon value. - <code>404 Not Found</code>: If album does not exist.</p>"},{"location":"developer/api/#post-get_umap_eps","title":"<code>POST /get_umap_eps/</code>","text":"<p>Description: Get the UMAP clustering epsilon for an album.</p> <p>Body: - <code>{ \"album\": \"album_key\" }</code></p> <p>Response: - <code>200 OK</code>: Current epsilon value. - <code>404 Not Found</code>: If album does not exist.</p>"},{"location":"developer/api/#umap-endpoints","title":"UMAP Endpoints","text":""},{"location":"developer/api/#get-umap_dataalbum_key","title":"<code>GET /umap_data/{album_key}</code>","text":"<p>Description: Get UMAP embedding data and DBSCAN cluster labels for an album.</p> <p>Parameters: - <code>album_key</code> (string): Album identifier - <code>cluster_eps</code> (float, optional): DBSCAN epsilon - <code>cluster_min_samples</code> (int, optional): DBSCAN min_samples</p> <p>Response: - <code>200 OK</code>: List of points with <code>x</code>, <code>y</code>, <code>index</code>, <code>cluster</code>. - <code>404 Not Found</code>: If album or embeddings not found.</p>"},{"location":"developer/api/#search-endpoints","title":"Search Endpoints","text":""},{"location":"developer/api/#post-search_with_text_and_imagealbum_key","title":"<code>POST /search_with_text_and_image/{album_key}</code>","text":"<p>Description: Search images by text and/or image similarity.</p> <p>Parameters: - <code>album_key</code> (string): Album identifier</p> <p>Body: - <code>positive_query</code> (string) - <code>negative_query</code> (string) - <code>image_data</code> (base64 string) - <code>image_weight</code> (float) - <code>positive_weight</code> (float) - <code>negative_weight</code> (float) - <code>top_k</code> (int)</p> <p>Response: - <code>200 OK</code>: List of results with <code>index</code> and <code>score</code>.</p>"},{"location":"developer/api/#get-retrieve_imagealbum_keyindex","title":"<code>GET /retrieve_image/{album_key}/{index}</code>","text":"<p>Description: Get metadata for a specific image.</p> <p>Parameters: - <code>album_key</code> (string) - <code>index</code> (int)</p> <p>Response: - <code>200 OK</code>: SlideSummary metadata.</p>"},{"location":"developer/api/#get-image_infoalbum_keyindex","title":"<code>GET /image_info/{album_key}/{index}</code>","text":"<p>Description: Get basic info for an image.</p> <p>Parameters: - <code>album_key</code> (string) - <code>index</code> (int)</p> <p>Response: - <code>200 OK</code>: ImageData object.</p>"},{"location":"developer/api/#get-get_metadataalbum_keyindex","title":"<code>GET /get_metadata/{album_key}/{index}</code>","text":"<p>Description: Download JSON metadata for an image.</p> <p>Parameters: - <code>album_key</code> (string) - <code>index</code> (int)</p> <p>Response: - <code>200 OK</code>: JSON metadata.</p>"},{"location":"developer/api/#get-thumbnailsalbum_keyindex","title":"<code>GET /thumbnails/{album_key}/{index}</code>","text":"<p>Description: Get a thumbnail for an image.</p> <p>Parameters: - <code>album_key</code> (string) - <code>index</code> (int) - <code>size</code> (int, optional)</p> <p>Response: - <code>200 OK</code>: Image file.</p>"},{"location":"developer/api/#get-imagesalbum_keypathpath","title":"<code>GET /images/{album_key}/{path:path}</code>","text":"<p>Description: Serve an image file by path.</p> <p>Parameters: - <code>album_key</code> (string) - <code>path</code> (string)</p> <p>Response: - <code>200 OK</code>: Image file.</p>"},{"location":"developer/api/#get-image_pathalbum_keyindex","title":"<code>GET /image_path/{album_key}/{index}</code>","text":"<p>Description: Get the file path for an image by index.</p> <p>Parameters: - <code>album_key</code> (string) - <code>index</code> (int)</p> <p>Response: - <code>200 OK</code>: Path as plain text.</p>"},{"location":"developer/api/#get-image_by_namealbum_keyfilenamepath","title":"<code>GET /image_by_name/{album_key}/{filename:path}</code>","text":"<p>Description: Serve an image by its filename.</p> <p>Parameters: - <code>album_key</code> (string) - <code>filename</code> (string)</p> <p>Response: - <code>200 OK</code>: Image file.</p>"},{"location":"developer/api/#index-management-endpoints","title":"Index Management Endpoints","text":""},{"location":"developer/api/#post-update_index_async","title":"<code>POST /update_index_async/</code>","text":"<p>Description: Start an asynchronous index update for an album.</p> <p>Body: - <code>{ \"album_key\": \"...\" }</code></p> <p>Response: - <code>202 Accepted</code>: Success message and task ID. - <code>409 Conflict</code>: If update already running.</p>"},{"location":"developer/api/#delete-remove_indexalbum_key","title":"<code>DELETE /remove_index/{album_key}</code>","text":"<p>Description: Remove the embeddings index file for an album.</p> <p>Parameters: - <code>album_key</code> (string)</p> <p>Response: - <code>200 OK</code>: Success message. - <code>404 Not Found</code>: If album or index does not exist.</p>"},{"location":"developer/api/#get-index_progressalbum_key","title":"<code>GET /index_progress/{album_key}</code>","text":"<p>Description: Get progress of an index update.</p> <p>Parameters: - <code>album_key</code> (string)</p> <p>Response: - <code>200 OK</code>: ProgressResponse object.</p>"},{"location":"developer/api/#delete-cancel_indexalbum_key","title":"<code>DELETE /cancel_index/{album_key}</code>","text":"<p>Description: Cancel an ongoing index update.</p> <p>Parameters: - <code>album_key</code> (string)</p> <p>Response: - <code>200 OK</code>: Success message. - <code>404 Not Found</code>: If no active operation.</p>"},{"location":"developer/api/#get-index_existsalbum_key","title":"<code>GET /index_exists/{album_key}</code>","text":"<p>Description: Check if an index exists for an album.</p> <p>Parameters: - <code>album_key</code> (string)</p> <p>Response: - <code>200 OK</code>: <code>{ \"exists\": true/false }</code></p>"},{"location":"developer/api/#utility-functions","title":"Utility Functions","text":"<p>These are used internally by the API:</p> <ul> <li><code>validate_album_exists(album_key)</code>: Raises HTTPException if album does not exist.</li> <li><code>get_embeddings_for_album(album_key)</code>: Returns Embeddings instance for album.</li> <li><code>validate_image_access(album_config, image_path)</code>: Checks if image path is allowed for album.</li> </ul> <p>Note: All endpoints may return appropriate HTTP error codes on failure. Authentication and authorization are not described here; add as needed for your deployment.</p> <p>See the source code for request/response models and further details.</p>"},{"location":"developer/architecture/","title":"PhotoMapAI Architecture","text":"<p>PhotoMapAI is a modular web application designed for efficient photo management, AI-powered search, and interactive visualization. Its architecture is organized into distinct layers and components to ensure scalability, maintainability, and ease of development.</p>"},{"location":"developer/architecture/#overview","title":"Overview","text":"<p>PhotoMapAI consists of three main layers:</p> <ol> <li> <p>Frontend</p> <ul> <li>Built with HTML, CSS, and JavaScript (ES6 modules).</li> <li>Provides a responsive user interface for browsing, searching, and visualizing photos.</li> <li>Uses libraries such as Swiper for slideshows and Plotly for UMAP visualizations.</li> </ul> </li> <li> <p>Backend </p> <ul> <li>Powered by FastAPI (Python).</li> <li>Handles API requests, image processing, metadata extraction, and search operations.</li> <li>Integrates with AI models for similarity and text-based search.</li> </ul> </li> <li> <p>Storage &amp; Configuration </p> <ul> <li>Stores images, thumbnails, and metadata on disk.</li> <li>Uses YAML configuration files to manage albums and application settings.</li> </ul> </li> </ol>"},{"location":"developer/architecture/#component-diagram","title":"Component Diagram","text":"<pre><code>+-------------------+      REST API      +-------------------+      Disk/YAML     +--------------+\n|   Frontend UI     | &lt;----------------&gt; |     Backend       | &lt;----------------&gt; | Images/Config|\n+-------------------+                    +-------------------+                    +--------------+\n</code></pre>"},{"location":"developer/architecture/#key-components","title":"Key Components","text":""},{"location":"developer/architecture/#frontend","title":"Frontend","text":"<ul> <li>Slideshow &amp; Gallery: Interactive image browsing with keyboard and touch support.</li> <li>Search Panel: AI-enabled search (similarity, text, metadata).</li> <li>UMAP Visualization: Clustered view of image embeddings.</li> <li>Settings &amp; Album Manager: Album creation, editing, and configuration.</li> </ul>"},{"location":"developer/architecture/#backend","title":"Backend","text":"<ul> <li>API Routers:  </li> <li><code>/search</code>: Search endpoints (similarity, text, metadata).</li> <li><code>/albums</code>: Album management.</li> <li><code>/images</code>: Image and thumbnail serving.</li> <li>Metadata Extraction: Parses and formats image metadata (EXIF, AI-generated).</li> <li>Indexing &amp; Embeddings: Generates and stores image embeddings for fast search.</li> <li>Config Manager: Loads and updates YAML configuration files.</li> </ul>"},{"location":"developer/architecture/#storage","title":"Storage","text":"<ul> <li>Images: Original and processed images stored in album directories.</li> <li>Thumbnails: Cached thumbnails for fast display.</li> <li>Metadata: JSON and YAML files for image and album metadata.</li> </ul>"},{"location":"developer/architecture/#data-flow","title":"Data Flow","text":"<ol> <li> <p>User Interaction:    User browses or searches for images via the frontend UI.</p> </li> <li> <p>API Request:    Frontend sends requests to backend endpoints for images, search, or metadata.</p> </li> <li> <p>Processing:    Backend processes requests, performs AI search, extracts metadata, and returns results.</p> </li> <li> <p>Rendering:    Frontend updates UI with images, overlays, and search results.</p> </li> </ol>"},{"location":"developer/architecture/#extensibility","title":"Extensibility","text":"<ul> <li>Modular Routers: Easily add new API endpoints.</li> <li>Pluggable Metadata Modules: Support for custom metadata extraction.</li> <li>Frontend Components: Add new panels or visualizations with minimal changes.</li> </ul>"},{"location":"developer/architecture/#technologies-used","title":"Technologies Used","text":"<ul> <li>Frontend: HTML5, CSS3, JavaScript (ES6), Swiper, Plotly</li> <li>Backend: Python 3, FastAPI, Pydantic, PIL/Pillow, UMAP, YAML</li> <li>Storage: Local filesystem, YAML/JSON</li> </ul>"},{"location":"developer/architecture/#development-notes","title":"Development Notes","text":"<ul> <li>All major components are documented in the <code>docs/developer/</code> section.</li> <li>See <code>docs/developer/api.md</code> for endpoint details.</li> <li>See <code>docs/developer/frontend.md</code> for UI component structure.</li> </ul>"},{"location":"developer/frontend/","title":"Frontend Architecture","text":"<p>The PhotoMapAI frontend is a modular, responsive web application built with HTML, CSS, and JavaScript (ES6 modules). It provides an interactive user interface for browsing, searching, and visualizing photo collections.</p>"},{"location":"developer/frontend/#structure","title":"Structure","text":"<p>The frontend code is organized into the following main components:</p> <ul> <li> <p>Image Browsing (<code>swiper.js</code>)   Handles image navigation, transitions, and keyboard/touch controls.</p> </li> <li> <p>Image Grid (<code>grid-view.js</code>)   The image grid display.</p> </li> <li> <p>Random Seeking (<code>seekslider.js</code>)   Slider control that allows the user to seek to arbitrary positions within album or search results.</p> </li> <li> <p>Metadata Overlay (<code>overlay.js</code>)   Displays image metadata, prompts, and reference images as overlays.</p> </li> <li> <p>Search Panel (<code>search.js</code>)   Provides AI-enabled search (similarity, text, metadata) and displays results.</p> </li> <li> <p>UMAP Visualization (<code>umap.js</code>)   Renders interactive UMAP plots for image clustering and exploration.</p> </li> <li> <p>Album Management (<code>album.js</code>)   Allows users to create, edit, and manage albums.</p> </li> <li> <p>Settings Dialog (<code>settings.js</code>)   Manages application settings, album selection, and configuration options.</p> </li> <li> <p>Event Handling (<code>events.js</code>, <code>touch.js</code>)   Centralizes event listeners for slide transitions, overlay toggling, and gesture support.</p> </li> <li> <p>Stylesheets (<code>slides.css</code>)   Provides base styles, responsive layouts, and theme customization.</p> </li> <li> <p>State Tracking (<code>state.js</code>, <code>slide-state.js</code>)   Tracking of the current image and search results (<code>slide-state.js</code>), and all other stateful variables (<code>state.js</code>)</p> </li> </ul>"},{"location":"developer/frontend/#key-technologies","title":"Key Technologies","text":"<ul> <li>JavaScript (ES6 modules): Modular code organization and dynamic UI updates.</li> <li>Swiper.js: Responsive slideshow and gallery navigation.</li> <li>Plotly.js: Interactive UMAP visualizations.</li> <li>Fetch API: Communicates with backend REST endpoints.</li> <li>CSS3: Responsive design and theming.</li> </ul>"},{"location":"developer/frontend/#data-flow","title":"Data Flow","text":"<ol> <li> <p>User Interaction    Users interact with the UI via clicks, taps, swipes, and keyboard shortcuts.</p> </li> <li> <p>API Requests    The frontend sends requests to backend endpoints for images, metadata, search, and album management.</p> </li> <li> <p>Rendering    The UI updates dynamically based on backend responses, displaying images, overlays, search results, and visualizations.</p> </li> <li> <p>Event Passing   A series of custom events couple user actions to changes in the user interface. Major events are:</p> </li> <li><code>albumChanged</code> -- The current album has changed.</li> <li><code>slideChanged</code> -- The currently selected slide (image) has changed.</li> <li><code>searchResultsChanged</code> -- The list of search results (including the selected umap cluster) has changed.</li> <li><code>seekToSlideIndex</code> -- The user wishes to jump to an arbitrary slide in the album or search results.</li> <li><code>swiperModeChanged</code> -- The user wishes to change from browse mode to grid mode or vice-versa.</li> <li><code>settingsUpdated</code> -- One or more settings has been changed.</li> </ol>"},{"location":"developer/frontend/#extending-the-frontend","title":"Extending the Frontend","text":"<ul> <li>Add new panels or dialogs by creating new JS modules and updating the main HTML template.</li> <li>Customize styles in <code>slides.css</code> and <code>extra.css</code>.</li> <li>Integrate new visualizations by importing libraries and adding new modules.</li> <li>Connect to new backend endpoints using the Fetch API.</li> </ul>"},{"location":"developer/frontend/#file-locations","title":"File Locations","text":"<ul> <li>JavaScript: <code>photomap/frontend/static/javascript/</code></li> <li>CSS: <code>photomap/frontend/static/css</code></li> <li>HTML Templates: <code>photomap/frontend/static/templates/</code></li> <li>Note that most of the HTML templates are in a subdirectory called <code>modules</code>.</li> <li>Documentation: <code>docs/developer/frontend.md</code></li> </ul>"},{"location":"developer/frontend/#further-reading","title":"Further Reading","text":"<ul> <li>Architecture Overview</li> <li>API Reference</li> </ul>"},{"location":"installation/cuda/","title":"Installing CUDA","text":"<p>CUDA library versions 12.6 through 12.9 are required to take advantage of GPU acceleration on NVidia graphics cards. Acceleration will dramatically speed up indexing of your photo collection by about 10X. After the index is built, GPU acceleration offers only a modest increase in performance when searching image content by text or image similarity. Note that CUDA is not available (or required) for MacOS systems.</p> <p>CUDA version 13 is not currently supported by the AI libraries underlying PhotoMapAI.</p>"},{"location":"installation/cuda/#steps-to-install-cuda","title":"Steps to Install CUDA","text":""},{"location":"installation/cuda/#1-first-test-whether-cuda-is-already-installed","title":"1. First test whether CUDA is already installed:","text":"<p>Open a command window and type the command <code>nvidia-smi</code>:</p> <pre><code>PS C:\\Users\\username&gt; nvidia-smi\nMon Aug 11 21:33:57 2025       \n+---------------------------------------------------------------------------------------+\n| NVIDIA-SMI 535.230.02             Driver Version: 535.230.02   CUDA Version: 12.9     |\n|-----------------------------------------+----------------------+----------------------+\n(more information follows)\n</code></pre> <p>If this runs and prints out CUDA Version 12.6-12.9 or higher, then you're all done and can skip the rest of this section.</p>"},{"location":"installation/cuda/#2-install-cuda-from-nvidia","title":"2. Install CUDA from NVIDIA.","text":"<p>Go to the CUDA 12.9 Download Page and choose your operating system, architecture, and OS version. Select either the \"local\" or \"network\" installer. Download the installer, run it, and follow the on-screen prompts.</p>"},{"location":"installation/cuda/#3-confirm-that-cuda-is-installed","title":"3. Confirm that CUDA is installed.","text":"<p>In a command shell, run the <code>nvidia-smi</code> command as in (1) and confirm that the expected version is installed.</p>"},{"location":"installation/cuda/#4-re-run-the-photomapai-installer-windows-only","title":"4. Re-run the PhotoMapAI installer (Windows only).","text":"<p>If you are on a Windows platform, please follow the PhotoMapAI Installation instructions to update the Torch machine learning library for CUDA support. The easiest path is to run the installer script again, and provide it with the same installation path you chose for the original install. Alternatively, you may manually install the CUDA version of Torch.</p> <p>To confirm that CUDA support is enabled, look for a console message about GPU acceleration when PhotoMapAI first launches.</p>"},{"location":"installation/python/","title":"Installing Python","text":"<p>You will need Python version 3.10 or higher. To determine if Python is already installed on your system, open up a command shell (Powershell or COM shell on Windows, Terminal on MacOS/Linux) and type:</p> <pre><code>python -V\n</code></pre> <p>If the command responds with <code>Python 3.10.0</code> or higher you are good to go. Otherwise, go to www.python.org, follow the download link, and install the version appropriate for your hardware and operating system.</p> <p>Important message for Windows users: When you run the Python installer, the installer has a checkbox to add python to your PATH. Please be sure to enable this! If you miss it the first time, run the installer again and make sure the checkbox is checked. It is also recommended to check the box that turns off file path length limits, which might otherwise cause problems down the road.</p> <p>After running the installer, run <code>python -V</code> again to confirm that it is installed and active.</p>"},{"location":"user-guide/albums/","title":"Managing Albums","text":"<p>PhotoMapAI allows you to organize your photos and other images into a series of albums. Each album draws its images from one or more folders of images, and manages independent search indexes and semantic maps. Albums may also overlap by having some image paths in common -- with some restrictions.</p>"},{"location":"user-guide/albums/#adding-albums","title":"Adding Albums","text":"<p>Bring up the Album Manager by clicking on the Settings gear icon and then the green Manage Albums&gt; button.</p> <p></p> <p>The Album Management dialogue provides you with controls for creating new albums, editing existing ones, deleting unwanted albums, and bringing an album's contents up to date after you've added or removed image file from its folder paths.</p> <p>To add an album, press the green Add Album button. This will add a new section to the dialogue window that prompts you to enter the following fields:</p> <ul> <li>Album Key - This is a short mnemonic text that is used to uniquely identify the album. You can add it to PhotoMapAI's URL in order to go directly to the album of your choice, so it is best to avoid spaces and symbols. Once the key is assigned, you can't change it.</li> <li>Display Name - This is the name of the album that will be displayed in the settings Album popup menu and the browser tab window title.</li> <li>Description (optional) - A description of the album.</li> <li>Image Folder(s) - One or more filesystem paths to the folders that contain image files to incorporate into the album.</li> </ul> <p></p> <p>At least one image folder needs to be defined. You can type the path in manually, or browse the filesystem for a folder by clicking on the folder icon to the right of the image folder field. Each time you enter a path, a new empty field will appear, allowing you to add additional folders to the album. You can remove a previously-entered folder by clicking a trash icon that appears next to it.</p> <p>You are free to organize your image files in any way you wish. You can dump them into a single big folder, or organize them into multiple nested subfolders. During indexing, PhotoMapAI will traverse the folder structure and identify all image files of type JPEG, PNG, TIFF, HEIF, and HEIC.</p>"},{"location":"user-guide/albums/#indexing-albums","title":"Indexing Albums","text":"<p>For fast search and retrieval, PhotoMapAI indexes all the image files it finds and stores them in a compact set of indexes. Indexing begins automatically when you first add an album, and will continue in the background even if you navigate away from the Album Manager, or even close the browser.</p> <p>The time it takes to index depends on how many image files you have, their size, the speed of the disk media, and the availability of a GPU. On a typical Windows machine with an NVidia graphics card, it takes ~2 hours to index 80,000 images located on a network mounted disk. Expect the speed to be noticeably faster on a collection of images located on a local solid-state disk, and much slower (about 10X) on a machine that lacks GPU acceleration.</p> <p>During indexing, PhotoMapAI will display its progress in three phases. First, it traverses the directory(ies) specified in the album configuration to identify and count image files. During this time PhotoMapAI displays the number of images it has found, but is unable to provide a time or %completion estimate. Second, it runs each image through a machine learning (AI) model to extract high-dimensional semantic information from the image (technically an \"embedding\"). During this phase, which is usually the longest in duration, PhotoMapAI will display its progress towards completion and an ETA. Lastly, PhotoMapAI generates the cluster map for all the image embeddings it has generated (technically, this is called a \"umap\"). The umap creation phase typically takes less than a minute and does not benefit from GPU acceleration.</p> <p>When the indexing process is done, you will find the generated indexes stored in a folder named \"photomap_index\" located in the first image folder path of the album. Try not to remove or rename this folder. The indexes are relatively small. A folder of 80,000 images that totals 85 GB yields an index that is 300 MB in size.</p> <p>When you add or remove image files from an album's image directory, you will need to reindex the album. Navigate to the album in the Album Manager list and press the blue Update Index button. The update operation will only reindex the files that have been added or removed and will be much faster than the first comprehensive indexing operation.</p>"},{"location":"user-guide/albums/#editing-an-album","title":"Editing an Album","text":"<p>To make changes to an album's definition, including changing its display name, description or paths, click the orange Edit button next to the album's entry in the Album Manager dialogue. Note that you cannot change the album key once the Album is initialized.</p>"},{"location":"user-guide/albums/#deleting-an-album","title":"Deleting an Album","text":"<p>To delete an album, click on the red Delete button next to the album entry. This will delete the configuration for the album, but doesn't change the underlying image files or the PhotoMapAI indexes. In particular, if you now add a new album that contains the same image path(s) as the previously-deleted album, the leftover indexes will be recognized and valid and you will not need to reindex.</p>"},{"location":"user-guide/albums/#selecting-an-album-by-url","title":"Selecting an Album by URL","text":"<p>You can easily construct a URL that will directly select an album of your choice. Use the format:</p> <p>http://localhost:8050?album= <p>Where <code>album_key</code> is the key (not the name) for the album you wish to load.</p>"},{"location":"user-guide/basic-usage/","title":"Basic Usage","text":"<p>PhotoMapAI is organized into a series of photo albums. Each album is a collection of images on the local machine or a shared drive.</p>"},{"location":"user-guide/basic-usage/#creating-an-album","title":"Creating an album","text":"<p>The first time you launch PhotoMapAI it will prompt you to create an album with the screen shown below.</p> <p></p> <p>Enter a short lowercase key for the album, such as \"family\", a longer descriptive name such as \"Family Photos 2025\", and optionally a description of the album. (The key can be used in URLs if you wish to share a particular album in a text or email message as described here).</p> <p>You'll now need to tell the album where its photos are stored. Enter one or more filesystem paths in the text field at the bottom named \"Image Paths\". Photos can be stored in a single large folder, or stored in multiple nestered folders. They can reside on the local disk or on a shared disk. If you wish, you can point the album to multiple folders, and their contents will be combined into a single album.</p> <p>PhotoMapAI supports photos in JPEG, PNG, TIFF, GIF, and HEIC/HEIF formats.</p> <p>The screenshot below shows the dialogue after populating it on a Linux or MacOS system. On Windows systems use the usual <code>C:\\path\\to\\directory</code> notation.</p> <p></p> <p>Once the album is set up to your liking, press the <code>Add Album</code> button at the bottom left and indexing will start:</p> <p></p> <p>Indexing can take some time. On a system equipped with an NVidia GPU, indexing a collection of ~50,000 images will take about two hours. On a system with CPU only, the process will take overnight. Mac users with hardware accelerated M1/2/3 chips will see performance somewhere in between the two. It is suggested to start with a small collection of photos (1000-2000 images) for your first album in order to test PhotoMapAI and get comfortable with its features.</p> <p>Once indexing is complete, the dialogue will close and you can start exploring your collection.</p> <p>For more information on adding and modifying albums see Albums.</p>"},{"location":"user-guide/basic-usage/#the-semantic-map","title":"The Semantic Map","text":"<p>When you open an album for the first time, it will show the Semantic Map view, a scatterplot of all the photos in your album, clustered and colored by similarity.</p> <p></p> <p>The initial view shows the entire collection, with a yellow target (far left side of the screenshot) marking the current photo on display. Use the mouse and scrollwheel to zoom in and out of the map and pan around. If you zoom in enough, you will see individual dots for each photo. The largest clusters are labeled with landmark images shown in the screenshot above as map markers pointing to major clusters. Hover the mouse over areas of interest to see larger thumbnail previews of the corresponding images. You can control whether landmarks and/or hover thumbnails are displayed by selecting those options in the checkboxes at the bottom of the screen. </p> <p>Click on a dot to load that photo into the album browsing display. This will also highlight the cluster that you clicked in and load the contents of the cluster into the search results. You can then use the navigation buttons or the grid view to scroll through the images in the selected cluster.</p> <p>If you don't see anything, or if the colors are very faint, this means that there were insufficient images in the album to cluster well. You can fix this by increasing the cluster strength. Go to the Cluster Strength field and increase its value until you are satisfied with the cluster number and size.</p> <p>If you hover over the top of the map, additional navigation controls appear for zooming in and out, panning, resetting to the default scale, and downloading the map as a PNG image.</p> <p></p> <p>You can control the size and position of the semantic map. You can have it appear in fullscreen mode that covers the full size image display beneath it, or you can set it to be a semi-transparent window that floats on top of the full size image. See Semantic Map for more details.</p> <p>You can completely close the semantic map at any time by clicking its close box or the Target (\u2299) icon at the bottom of the screen (see the screenshot below). To reopen the map, click the Target icon again.</p>"},{"location":"user-guide/basic-usage/#the-album-browsing-display","title":"The Album Browsing Display","text":"<p>If you click on an image in the semantic map, or just close the window, you will see the album browsing display shown below. Hover over the screenshot to see the key to the various buttons and controls for album browsing:</p> <p>Going from left to right:</p> <ul> <li>The About button shows the current version of the software and links to its  home page. _ The Previous slide and Next slide buttons advance the images in the album or current search.</li> <li>The Gear button opens up a dialogue that lets you adjust the behavior and appearance of PhotoMapAI.</li> <li>The Trash icon permanently deletes the current photo from the album and removes the disk file (after confirmation).</li> <li>The Fullscreen button puts PhotoMapAI into fullscreen mode and hides most of the control elements.</li> <li>The Grid icon toggles between showing one image at a time to showing a screen of thumbnails.</li> <li>The Play/Pause button starts and stops a slideshow in which the photos autoadvance after a user-adjustable interval.</li> <li>The Target icon opens and closes the semantic map.</li> <li>The Landscape icon initiates a search for images similar to the one currently displayed.</li> <li>The Magnifier button opens up a search dialogue that lets you search by image similarity and/or a text description of image content.</li> <li>The \"Clear search* button clears any search that is currently active and returns to album browsing mode.</li> </ul> <p>Finally, the yellow tab with the black arrow on the left margin of the window opens a drawer that displays the image's EXIF date, including the date the photo was taken, GPS information (if available), and camera information. Once you open the drawer up, you can drag it around by clicking on any of its edges. Click the black arrow again to return it to its home location and close it.</p>"},{"location":"user-guide/basic-usage/#jumping-forward-and-back","title":"Jumping Forward and Back","text":"<p>Hover the mouse near the top of the window to reveal a slider control that will let you seek forward and backward among the images. If no search is active, the slider shows the images sorted by their date. If an image or text similarity search is active, the slider changes to indicate the match score (higher numbers are better matches). If a cluster was selected with the semantic map, then the slider changes to indicate the slide numbers within the cluster.</p> <p></p> <p>You can navigate through your album, enter and exit fullscreen, and start and stop the slideshow with a variety of keystrokes and gestures on touch-enabled devices. See Keyboard Shortcuts for details.</p>"},{"location":"user-guide/basic-usage/#viewing-a-thumbnail-grid","title":"Viewing a Thumbnail Grid","text":"<p>At any time you can click on the Grid icon to shift from single-slide mode to grid mode:</p> <p></p> <p>In grid mode, the arrow buttons move forward and back one screen's worth of thumbnails. Click on a thumbnail to select its image. When selected, the image's metadata will be displayed in the metadata drawer, and the semantic map will update to show the position of the current image. Double-click on a thumbnail in order to open the image at full resolution in browse mode.</p> <p>You may also advance the grid using the slider control that appears when you hover near the top of the window. </p>"},{"location":"user-guide/basic-usage/#changing-settings","title":"Changing Settings","text":"<p>The Gear icon opens the settings dialogue, which allows you to adjust the appearance and behavior of PhotoMapAI:</p> <p></p> <ul> <li> <p>Image Change Interval -- When the slideshow is running, this controls how long each image will be displayed, in seconds.</p> </li> <li> <p>Image Browse Order -- When the slideshow is running, or when you are browsing the album without an active search, this controls the order in which photos are displayed. \"Random\" will present the images in shuffled order, while \"Chronological\" will show them in order from oldest to newest.</p> </li> <li>Grid thumbnail size factor -- This allows you to change the size of the image thumbnails by scaling them from a maximum of 2.0 (double default size) to a minimum of 0.5 (half default size). Be aware that the grid takes longer to load with small thumbnails.</li> <li>Show Button Labels -- Disabling this checkbox allows you to turn off the labels on the row of clickable icons at the bottom of the screen for a more minimalist experience.</li> <li>Confirm before deleting images -- Disabling this checkbox stops the Trash Can icon from asking for confirmation before permanently deleting the current image from disk.</li> <li>LocationIQ Map API Key -- This optional API key lets PhotoMapAI display thumbnail maps and named locations for photos that contain GPS geolocation information. If you wish to enable this feature, get a key for free from LocationIQ and paste it into the field. If not present, PhotoMapAI will display the longitude and latitude of the photo, but not the map or place name.</li> <li>Album -- This pulldown menu lists all the albums you have configured and allows you to switch among them. Note that when you switch albums, the settings dialogue will close immediately and the window will display the first photo from the selected albums.</li> <li>Manage Albums -- This green button will open the Album Manager, where you can create, edit and delete albums.</li> </ul>"},{"location":"user-guide/configuration/","title":"Configuration","text":"<p>PhotoMapAI is primarily configured through the web interface as described in Basic Usage and Albums. However, there are a number of runtime parameters that control how the web service behaves.</p>"},{"location":"user-guide/configuration/#changing-the-web-host-and-port","title":"Changing the Web Host and Port","text":"<p>By default, PhotoMapAI runs its web service on port 8050 and only accepts connections on the local machine (<code>localhost</code>). These can be changed on the command line used to launch the application using the <code>--port</code> and <code>--host</code> options:</p> <pre><code>start_photomap --port 8000 --host 0.0.0.0\n</code></pre> <p>This command changes the port to port 8000, and allows PhotoMapAI to listen for connections on the wildcard IP address <code>0.0.0.0</code>, meaning that it will accept connections for any network-accessible location.</p> <p>If you are using a launcher script to start PhotoMapAI (e.g. <code>start_photomap.bat</code>) you can change these values by opening the script in a text editor (<code>Notepad</code> on Windows), finding the line containing <code>start_photomap</code>, and adding the options as shown above.</p> <p>Alternatively, you can change the port and host interface by setting two environment variables prior to launching PhotoMapAI. These are:</p> <ul> <li><code>PHOTOMAP_HOST</code> - the host interface to accept connections from</li> <li><code>PHOTOMAP_PORT</code> - the listen port</li> </ul> <p>On Linux and Macintosh systems, you can set these environment variables on the command line like so:</p> <pre><code>PHOTOMAP_HOST=\"0.0.0.0\" PHOTOMAP_PORT=\"8000\" start_photomap\n</code></pre> <p>Or you can permanently fix these environment variables by setting them in your shell's profile, e.g. <code>.bashrc</code>.</p> <p>On Windows systems, setting environment variables can be done through the GUI as well as on the command line. See How to Set Environment Variables in Windows for a good walkthrough.</p>"},{"location":"user-guide/configuration/#running-photomapai-under-https","title":"Running PhotoMapAI Under HTTPS","text":"<p>By default, PhotoMapAI runs as a non-secure <code>HTTP</code> service. This generates a warning icon in some browsers, but more seriously prevents cut and paste between the PhotoMapAI tab and browser tabs and desktop applications. </p> <p>There are several ways to enable HTTP for PhotoMapAI:</p>"},{"location":"user-guide/configuration/#install-a-self-signed-ssl-certificate","title":"Install a Self-Signed SSL Certificate","text":"<p>In this method, you generate self-signed encryption certificate and private key files and point PhotoMapAI to them using its <code>--cert</code> and <code>--key</code> command-line options.</p> <p>Guides to generating and installing self-signed certificates:</p> <ul> <li> <p>Creating Self-Signed Certificates with Windows PowerShell. Please apply the arguments to create .crt and .pem files.</p> </li> <li> <p>Creating Self-Signed Certificates with OpenSSL (Mac/Linux)</p> </li> </ul> <p>These methods will leave you with two files, a .crt certificate file, and a .pem key file. Relaunch the PhotoMapAI server using <code>--cert /path/to/.crt file</code> and <code>--key /path/to/.pem file</code>. If you are using the desktop launcher to start the server, simply open the launcher file with a text editor, and add the <code>--cert</code> and <code>--key</code> options to the end of the line that ends with <code>start_photomap</code>.</p> <p>After installing the certificate/key pair and relaunching the server, you will be able to access the PhotoMapAI server using the https:// URL. Your browser will complain about an unknown certificate authority when you first load the URL and ask you to confirm that you trust the site.</p>"},{"location":"user-guide/configuration/#use-certbot","title":"Use Certbot","text":"<p>The Certbot tool provides public certificates that browsers automatically trust. It is very easy to use, but it requires that you have a web running on port 80 that accepts incoming HTTP connections.</p> <p>Once the Certbot certificate and keyfile are generated, follow the directions in the previous section to configure PhotoMapAI to use them.</p>"},{"location":"user-guide/configuration/#use-a-reverse-proxy","title":"Use a Reverse Proxy","text":"<p>A final option is to keep PhotoMapAI running on HTTP, but use a reverse proxy from a running web server to translate HTTPS requests on the reverse proxy into HTTP requests to PhotoMapAI. The main advantage of this is that you get the additional benefit of all the web server's configuration controls, such as the ability to add password protection.</p> <p>Here are some guides for setting up reverse proxies. The first is a general guide for configuring a reverse proxy with the popular Nginx web server. The second features a Windows-specific walkthrough.</p> <ul> <li>NGINX Reverse Proxy</li> <li>NGINX Reverse Proxy on Windows</li> </ul> <p>You will need to install encryption certificates for the Nginx server using Certbot. The final configuration of the proxy server will look something like this:</p> <pre><code>    location /photomap/ {\n    proxy_pass http://localhost:8050/;\n</code></pre> <p>This is saying that when a request comes in for <code>https://your.host/photomap/</code> it will be translated into a request to <code>http://localhost:8050/</code> where PhotoMapAI is running. It is possible to run the proxy server and the PhotoMapAI server on separate machines as well.</p>"},{"location":"user-guide/configuration/#pointing-to-an-alternative-configuration-file","title":"Pointing to an Alternative Configuration File","text":"<p>PhotoMapAI stores its album definitions and other configuration information in a configuration file. It is not usually necessary to manipulate it directly, but if you wish you can point to an alternative config file in order to have multiple PhotoMapAI servers each hosting separate album collections.</p> <p>The config file is stored in different places depending on the platform:</p> Platform Config File Path Linux ~/.config/photomap/config.yaml MacOS ~/Library/Application Support/photomap/config.yaml Windows C:\\Users\\\\AppData\\Roaming\\photomap\\config.yaml <p>To run PhotoMapAI off a different config file, you may launch it with the <code>--config</code> option on the command line, similar to setting the port and host. In the below example we specify an alternative config file named <code>photomap_2.yaml</code></p> <pre><code>start_photomap --config ~/photomap_2.yaml\n</code></pre> <p>If the indicated config file doesn't exist when you launch PhotoMapAI, it will be created automatically.</p> <p>You may also point to an alternative configuration file by setting the environment variable <code>PHOTOMAP_CONFIG</code>, as described in the previous section:</p> <pre><code>PHOTOMAP_CONFIG=~/photomap_2.yaml start_photomap\n</code></pre> <p>It is also possible, but not recommended, to edit the configuration file directly using a text editor. The format is straightforward to understand, but liable to change in the future.</p>"},{"location":"user-guide/keyboard-shortcuts/","title":"Keyboard and Tablet Shortcuts","text":"<p>On devices equipped with a keyboard, you can use the following key shortcuts:</p> Key Action \u2192 (Right) Next image \u2190 (Left) Previous image \u2191 (Up), i Show image info drawer \u2193 (Down), Esc Hide image info drawer f Toggle fullscreen m Toggle UMAP window Space Play/Pause slideshow Scrollwheel Next/Previous image <p>On tablets, phones and other touch-enabled devices, these gestures work:</p> Gesture Action Swipe Left Next image Swipe Right Previous image Pinch Zoom in and out of image Tap Play/Pause slideshow Touch and Hold Show system image menu"},{"location":"user-guide/search/","title":"Search","text":"<p>PhotoMapAI provides several types of AI-enabled search across your image/photo collection:</p> <ul> <li>Search by Image - Provide an image and PhotoMapAI will find matches against it.</li> <li>Search by Text - Type in a word or phrase and PhotoMapAI will find the closest matches.</li> <li>Search by Text and Image - Provide image and text to find matches that best combine the two. You can also provide a \"negative search text\" to disfavor certain image content.</li> <li>Search by Map - Browse images that are clustered together in the semantic map.</li> </ul>"},{"location":"user-guide/search/#search-by-image","title":"Search by Image","text":"<p>To search PhotoMapAI by image similarity:</p> <ol> <li> <p>Find images similar to the one currently on display in the main window.</p> <p>When the image you wish to search on is displayed in the main window, click on the Landscape icon (labeled By Image in the screenshot above). The search results, sorted in descending order of relevance, will immediately be displayed in the main window. Since you are searching on an image that is already in the album, the top hit will be the one you searched with. Navigate forward using the &gt; button or the right arrow key to see the next best result.</p> </li> <li> <p>Drag an image into the Search area.</p> <p>Drag an image from your local filesystem, a web page, or any other draggable source into the area where the three search buttons are located. The provided image will be used to search for other images that are similar.</p> </li> <li> <p>Upload an image from your local filesystem</p> <p>Click on the Magnifying Glass icon to open up the combined image/text search dialogue. Click the Image Search box (see screenshot below) to open up a file picker dialogue.</p> </li> <li> <p>Paste an image from the clipboard</p> <p>If you have an image in the clipboard, you may open the search dialogue and paste in the image in using the key combination appropriate for your platform (e.g. command-V).</p> </li> </ol> <p>The screenshot below shows the results of an image search on a photo of a generic mountain found in Google Images. The match score, a value ranging from 0.0 (no match) to 1.0 (perfect match), appears at the top left. The seek slider at the top lets you select images with particular score ranges. A bit counterintuitively, images with the strongest matches (highest scores) appear earlier to the left, and those with the weakest scores appear later.</p> <p></p>"},{"location":"user-guide/search/#search-by-text","title":"Search by Text","text":"<p>Open the search By Text magnifying glass icon and type your search term into the input field labeled \"Text Search.\" A wide variety of search terms are accepted. You can search for people (\"blonde man in wool sweater\"), subjects (\"birthday party\"), styles (\"graphic novel\"), or photography-related descriptors (\"out of focus\", \"motion blur\"). You can search for certain celebrities by name, but you cannot search for family members, friends and other private individuals. (Providing a way to train PhotoMapAI with custom data is a potential future improvement.)</p>"},{"location":"user-guide/search/#search-by-a-combination-of-text-and-image","title":"Search by a Combination of Text and Image","text":"<p>An advanced use of the search interface allows you to search simultaneously on images and text. You can also provide \"negative text\" to avoid the appearance of certain themes or subjects. Be aware that it may take some trial and error to get the search to perform in the way you desire. One issue is that images typically match with a higher similarity score than text. Another issue is that negative text can often lower the overall match score and lead to no hits. To get more control over the process, each of the three search fields is accompanied by a weight slider (see circled area in the screenshot below) that allows you to adjust the relative weighting of each of the three criteria. The relative values of the three sliders controls how much each criterion will contribute to the search. I typically set the image and negative text fields to have weights that are less than half the weight of the positive text search and then adjust until I get the spread of search results I expect. </p> <p></p>"},{"location":"user-guide/search/#search-by-map","title":"Search by Map","text":"<p>Clicking on the \u2299 (target) icon will open the Semantic Map and position a yellow marker on the dot that corresponds to the current image in view:</p> <p></p> <p>If you hover over dots adjacent to the current one, PhotoMapAI will pop up a thumbnail image to show you the neighbors of the current image. Clicking on a colored cluster will select all members of the cluster, dim other clusters, and set the selected cluster's members as the current search results. To turn off the cluster highlighting and restore full brightness to all clusters, uncheck the Highlight selection checkbox in the bottom right-hand corner.</p>"},{"location":"user-guide/search/#clearing-the-search","title":"Clearing the Search","text":"<p>When a search is active, a green checkmark on top of one or more search icons indicates the search type, and a clear search X Icon appears in the row of search icons. Click this box to clear the search results and reset PhotoMapAI to album browsing mode. Alternatively you can individually clear the similarity search image, and the positive and negative text search fields, by clicking on the X marks in their respective fields of the combined image and text search dialogue.</p>"},{"location":"user-guide/semantic-map/","title":"Semantic Map","text":"<p>The PhotoMapAI semantic map is a graphical representation of the relationships among all the photos/images in an album. Each image is represented by a dot. Images that are similar will be closer together on the map than dissimilar images. The semantic map is linked to the main image display. The location of the current image is shown on the semantic map as a yellow target icon. Clicking on an image dot anywhere in the map will bring the full-resolution photo/image into view in the main display. Hovering over an image dot will pop up a thumbnail of the image, allowing you to rapidly explore the image landscape.</p> <p></p>"},{"location":"user-guide/semantic-map/#the-clustering-process","title":"The Clustering Process","text":"<p>The semantic map is generated in two phases. In the first phase, which is performed when the album's index is created or updated, each image is compressed into a high-dimensional representation of its contents called an \"embedding.\" The embeddings are then projected onto a 2D X-Y plot using the UMAP dimensionality-reduction algorithm. UMAP is able to preserve the topological relationships among embeddings. Two embedding points that are close together on the UMAP are more semantically similar than two that are far apart.</p> <p>In the second phase, PhotoMapAI applies an algorithm known as DBSCAN Density-Based Spatial Clustering of Applications with Noise to partition the map into multiple clusters of highly-related images. Each cluster is then assigned an arbitrary color for visualization. The clustering process is quick and happens automatically the first time you open the semantic map window on a particular album.</p>"},{"location":"user-guide/semantic-map/#tuning-clusters","title":"Tuning Clusters","text":"<p>The overall topology of the semantic map is fixed during the indexing process, but the clustering phase can be adjusted on the fly. At the bottom of the semantic map window is a field labeled \"Cluster Strength,\" and contains a floating point value ranging from 0.0 to 1.0. This parameter (technically called epsilon, or \"eps\") controls the clustering size. Higher values of eps will create a smaller number of large clusters, while lower values will create a larger number of small clusters.</p> <p></p> <p>The default value of eps is 0.07, which empirically seems to work well for collections of a few tens of thousands of photographs. For smaller collections, you may wish to increase eps to 0.1 through 0.5. If the eps is too low, you may also see a lot of unclustered images, which are represented as faint gray dots. If you initially don't see much when you pull up the semantic map, gradually increase the \"Cluster Strength\" field until the display is satisfactory.</p>"},{"location":"user-guide/semantic-map/#interpreting-clusters","title":"Interpreting Clusters","text":"<p>What does \"semantically similar\" mean? Embeddings capture many different aspects of an image, ranging from low-level features such as brightness and color palette, to high-level features such as particular people and places. This can lead to interesting appositions. For example, say you have three photos depicting (1) Mary at the playground; (2) Mary at a birthday party; and (3) Timmy at a birthday party. (1) and (2) will mapped close together because they share the same subject, Mary. (2) and (3) will be close together because they share the same event, a birthday party. Because of these relationships, (1) and (3) will also likely be close together as well, but further apart than either of the other two pairs.</p> <p>Therefore you will find clusters that contain a mixture of relationships. Sometimes you will find yourself scratching your head to figure out why several images cluster together, but more often you'll discover delightfully unexpected groupings. For example, my family photo collection contains clusters corresponding to \"kids climbing trees,\" \"pets yawning,\" and \"weddings on the maternal side of the family.\"</p>"},{"location":"user-guide/semantic-map/#navigating-the-map","title":"Navigating the Map","text":"<p>When you first open the map it will be zoomed almost all the way out. You will likely wish to increase the zoom level in order to see more detail. This is intuitive when using a mouse. The scrollwheel will zoom in and out, while clicking and dragging on the map will move the map around (panning). </p> <p>There is also a hidden navigation bar at the top of the plot that appears when you hover the mouse pointer over it. From left to right, the icons have the following functions:</p> <p></p> <ul> <li>Camera Icon - Snapshot the current map and save it to disk as a PNG image.</li> <li>Magnifier Icon - Outline a rectangular region of the map and zoom into it.</li> <li>NSEW Arrows Icon - Pan the image (default behavior).</li> <li>+ and - icons - Zoom in and zoom out.</li> <li>Crossed Arrows Icon - Zoom out until the entire map is in view.</li> <li>Home Icon - Reset view to the default.</li> <li>Plotly Icon - Advertisement for the plotting package used to plot the map.</li> </ul> <p>On tablet devices, the best way to zoom into an area of interest is to use the magnifier icon and/or a combination of the pan tool and the Zoom in/out icons.</p>"},{"location":"user-guide/semantic-map/#moving-and-resizing-the-map-window","title":"Moving and Resizing the Map Window","text":"<p>The map window can be repositioned anywhere on the screen by clicking and dragging on its titlebar. It can be resized by clicking the resize icons shown in the screenshot below (mouse over to see the legend).</p> <p>The sizes shown are approximate and are adjusted for different size browser windows. The full-screen size (the leftmost icon) covers the entire window and is opaque. Other sizes are slightly transparent to allow you to see the full-size images beneath.</p> <p>The shade icon (rightmost) collapses the window so that only the titlebar is visible. This is convenient for temporarily uncluttering the screen.</p>"},{"location":"user-guide/semantic-map/#controlling-thumbnail-images","title":"Controlling Thumbnail Images","text":"<p>The semantic map can show you preview images in two ways. You can have it pop up thumbnails on the fly as you mouse over the map. You can have it put down static thumbnail landmarks on the most prominent clusters in the current view. Or you can do both!</p> <p>These functions are controlled by the checkboxes in the bottom right of the window:</p> <p></p> <p>Selecting \"Show landmarks\" will position small static thumbnails on the clusters, while \"Show hover thumbnails\" will pop up a larger preview window as you hover the mouse over the image dots. The former gives you an overview of what's in your collection. The latter gives you only one preview image at a time, but it is larger and more detailed.</p> <p>With \"Show landmarks\" turned on and \"Show hover thumbnails\" turned off:</p> <p></p> <p>With \"Show hover thumbnails\" turned on and \"Show landmarks\" turned off:</p> <p></p> <p>By default, landmarks will be turned on and hover images turned off when you enter the map's fullscreen mode. The opposite happens when  you leave fullscreen mode and enter windowed mode. See below for more information on window modes and sizes.</p>"},{"location":"user-guide/semantic-map/#selecting-clusters","title":"Selecting Clusters","text":"<p>Clicking on any colored image dot or a landmark preview will select all the images in its cluster and add them to the main display's search results. You will see the selected cluster become brighter, while all the other clusters will dim. This effect can be turned on and off by clicking on the checkbox in the bottom right corner labeld \"Highlight selection.\"</p> <p>When a cluster is selected, the image search results will be sorted according to their distance from the image you clicked on in the semantic map. If you leave the semantic map window open and scroll through the results, you will see the yellow map position marker move increasingly far away from the original point. At the same time, the displayed full-size images will slowly diverge and become more diverse.</p>"},{"location":"user-guide/semantic-map/#unclustered-images","title":"Unclustered Images","text":"<p>There will often be images that can't be assigned to any cluster. These appear as light gray dots in scatterplot. Click on one of these to highlight the unclustered images and browse through them.</p> <p>You can decrease the number of unclustered images by increasing EPS. This will cluster the images more aggressively and also merge existing clusters. Experiment until you find the setting that works best for you.</p>"}]}